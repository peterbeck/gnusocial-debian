#!/bin/bash

set -e

# Source debconf library.
. /usr/share/debconf/confmodule

function wait_for_onion_service {
    onion_service_name="$1"

    sleep_ctr=0
    while [ ! -f /var/lib/tor/hidden_service_${onion_service_name}/hostname ]; do
        sleep 1
        sleep_ctr=$((sleep_ctr + 1))
        if [ $sleep_ctr -gt 10 ]; then
            break
        fi
    done

    if [ ! -f /var/lib/tor/hidden_service_${onion_service_name}/hostname ]; then
        # restart and try a second time
        service tor restart
        sleep_ctr=0
        while [ ! -f /var/lib/tor/hidden_service_${onion_service_name}/hostname ]; do
            sleep 1
            sleep_ctr=$((sleep_ctr + 1))
            if [ $sleep_ctr -gt 10 ]; then
                break
            fi
        done
    fi
}

APP='gnusocial'
GNUSOCIAL_DOMAIN_NAME="${APP}.example"
ONION_HOSTNAME=/var/lib/tor/hidden_service_${APP}/hostname
ADMIN_PASS="${APP}"
GNUSOCIAL_PORT=8087

if [ -d /etc/tor ]; then
    # create an onion service
    if [ ! -d /var/lib/tor/hidden_service_${APP} ]; then
        echo "HiddenServiceDir /var/lib/tor/hidden_service_${APP}" >> /etc/tor/torrc
        echo "HiddenServicePort 80 127.0.0.1:$GNUSOCIAL_PORT" >> /etc/tor/torrc
        service tor restart
        wait_for_onion_service ${APP}
    fi
fi

# get the onion hostname if it exists
GNUSOCIAL_ONION_DOMAIN_NAME=
if [ -f $ONION_HOSTNAME ]; then
    GNUSOCIAL_ONION_DOMAIN_NAME=$(cat $ONION_HOSTNAME)
fi

# get the domain name to be used
db_get ${APP}/domain
GNUSOCIAL_DOMAIN_NAME_STR=$RET
if [ $GNUSOCIAL_DOMAIN_NAME_STR ]; then
    GNUSOCIAL_DOMAIN_NAME=$GNUSOCIAL_DOMAIN_NAME_STR
fi

SCRDIR=$(mktemp -dt "$0")
if [ ! "$?" = "0" ]; then
    exit 1
fi
SQL_FILE=$SCRDIR/${APP}.sql
INSTALLDIR=/etc/share/${APP}

# link into /var/www
if [ ! -L /var/www/${APP} ]; then
    ln -s $INSTALLDIR /var/www/${APP}
fi

# configure nginx
if [ -d /etc/nginx ]; then
    if [[ $GNUSOCIAL_DOMAIN_NAME != *".onion" ]]; then
        install -m 644 $INSTALLDIR/webservers/nginx /etc/nginx/sites-available/${APP}
        if [ $GNUSOCIAL_ONION_DOMAIN_NAME ]; then
            cat $INSTALLDIR/webservers/nginx $INSTALLDIR/webservers/nginx_onion > /etc/nginx/sites-available/${APP}
            sed -i "s|GNUSOCIAL_PORT|${GNUSOCIAL_PORT}|g" /etc/nginx/sites-available/${APP}
        fi
        sed -i "s|gnusocial.example|${GNUSOCIAL_DOMAIN_NAME}|g" /etc/nginx/sites-available/${APP}
        # Don't enable the site by default because the host files may need to be edited
        #if [ ! -L /etc/nginx/sites-enabled/${APP} ]; then
        #   ln -s /etc/nginx/sites-available/${APP} /etc/nginx/sites-enabled/
        #fi
    else
        # install as an onion service only
        install -m 644 $INSTALLDIR/webservers/nginx_onion /etc/nginx/sites-available/${APP}
        sed -i "s|${APP}.example|${GNUSOCIAL_ONION_DOMAIN_NAME}|g" /etc/nginx/sites-available/${APP}
        sed -i "s|GNUSOCIAL_PORT|${GNUSOCIAL_PORT}|g" /etc/nginx/sites-available/gnusocial
        if [ ! -L /etc/nginx/sites-enabled/${APP} ]; then
            ln -s /etc/nginx/sites-available/${APP} /etc/nginx/sites-enabled/
        fi
    fi
fi

# configure apache
if [ -d /etc/apache2/sites-available ]; then
    if [[ $GNUSOCIAL_DOMAIN_NAME != *".onion" ]]; then
        install -m 644 $INSTALLDIR/webservers/apache2 /etc/apache2/sites-available/${APP}
        if [ $GNUSOCIAL_ONION_DOMAIN_NAME ]; then
            cat $INSTALLDIR/webservers/apache2 $INSTALLDIR/webservers/apache2_onion > /etc/apache2/sites-available/${APP}
            sed -i "s|GNUSOCIAL_PORT|${GNUSOCIAL_PORT}|g" /etc/apache2/sites-available/${APP}
        fi
        sed -i "s|${APP}.example|${GNUSOCIAL_DOMAIN_NAME}|g" /etc/apache2/sites-available/${APP}
        # Don't enable the site by default because the host files may need to be edited
        #if [ ! -L /etc/nginx/sites-enabled/${APP} ]; then
        #    a2ensite ${APP}
        #fi
    else
        # install as an onion service only
        install -m 644 $INSTALLDIR/webservers/apache2-onion /etc/apache2/sites-available/${APP}
        sed -i "s|${APP}.example|${GNUSOCIAL_ONION_DOMAIN_NAME}|g" /etc/apache2/sites-available/${APP}
        sed -i "s|GNUSOCIAL_PORT|${GNUSOCIAL_PORT}|g" /etc/apache2/sites-available/${APP}
        if [ ! -L /etc/apache2/sites-enabled/${APP} ]; then
            a2ensite ${APP}
        fi
    fi
fi

# get password for admin of the gnusocial database
db_get ${APP}/admin_password
GNUSOCIAL_ADMIN_PASSWORD=$RET
if [ $GNUSOCIAL_ADMIN_PASSWORD ]; then
    ADMIN_PASS=$GNUSOCIAL_ADMIN_PASSWORD
fi

# get root password for mysql/MariaDB
MYSQL_ROOT_PASS=
db_get ${APP}/mysql_password
MYSQL_ROOT_PASSWORD=$RET
if [ $MYSQL_ROOT_PASSWORD ]; then
    MYSQL_ROOT_PASS=$MYSQL_ROOT_PASSWORD
fi

# create the database
if [ $MYSQL_ROOT_PASS ]; then
    RESULT=$(mysqlshow --user=root --password="$MYSQL_ROOT_PASS" ${APP} | grep -v Wildcard | grep -o ${APP})
    if [ "$RESULT" != "${APP}" ]; then
        # create a database
        echo "create database ${APP};
CREATE USER '${APP}admin'@'localhost' IDENTIFIED BY '$ADMIN_PASS';
GRANT ALL PRIVILEGES ON ${APP}.* TO '${APP}admin'@'localhost';
quit" > $SQL_FILE
        chmod 600 $SQL_FILE
        mysql -u root --password="$MYSQL_ROOT_PASS" < $SQL_FILE
        if [ ! "$?" = "0" ]; then
            echo $"Unable to create database for ${APP}"
        fi
    fi
fi
rm -rf $SCRDIR

# set permissions
chmod a+w $INSTALLDIR
chown www-data:www-data $INSTALLDIR
chmod a+w $INSTALLDIR/avatar
chmod a+w $INSTALLDIR/background
chmod a+w $INSTALLDIR/file
chmod +x $INSTALLDIR/scripts/maildaemon.php

exit 0
